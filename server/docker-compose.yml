version: "3.8"
networks:
  internal:

services:
  web:
    build:
      context: .
      args:
        - NODE_ENV=devlopment
        - SERVER_PORT=${SERVER_PORT}
        - CLIENT_PORT=${CLIENT_PORT}
        - SERVER_HOST_ADDRESS=${SERVER_HOST_ADDRESS}
        - CLIENT_HOST_ADDRESS=${CLIENT_HOST_ADDRESS}
        - CLIENT_ID=${CLIENT_ID}
        - CLIENT_SECRET=${CLIENT_SECRET}
        - SESS_SECRET=${SESS_SECRET}
    container_name: saveddit-server
    volumes:
      - .:/usr/app
    command: npm run dev
    networks:
      - internal
    ports:
      - "8000:${SERVER_PORT}"
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    restart: always
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://${SERVER_HOST_ADDRESS}:${SERVER_PORT}/ping",
        ]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
  redis:
    image: redis:latest
    container_name: redis-server
    networks:
      - internal
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 3
      start_period: 1s
  postgres:
    image: postgres:latest
    restart: always
    volumes:
      - "./data/db:/var/lib/postgresql/data"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass
      POSTGRES_NAME: postgres
      POSTGRES_DB: db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
